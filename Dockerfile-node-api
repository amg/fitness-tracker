# Use an official Node.js runtime as a parent image
FROM node:18-alpine as builder

# Set the working directory in the container
WORKDIR /app

ARG ENV
ENV ENV=${ENV}

ARG GOOGLE_CLIENT_ID
ENV GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
ARG GOOGLE_CLIENT_CALLBACK_URL
ENV GOOGLE_CLIENT_CALLBACK_URL=${GOOGLE_CLIENT_CALLBACK_URL}
ARG NODE_API_PORT
ENV NODE_API_PORT=${NODE_API_PORT}
ARG COOKIE_DOMAIN
ENV COOKIE_DOMAIN=${COOKIE_DOMAIN}
ARG WEB_BASE_URL
ENV WEB_BASE_URL=${WEB_BASE_URL}

# Copy all files from the current directory to the working directory
COPY ./node-api/ .

# Install app dependencies
RUN npm install

# ------ Development stage
FROM builder as dev

# Set NODE_ENV
ENV NODE_ENV=development

ARG SECRETS_PATH
ENV SECRETS_PATH=${SECRETS_PATH}

# need secrets
COPY ${SECRETS_PATH}* /app/.secrets

# secure variables for dev env
ARG POSTGRES_URL
ENV POSTGRES_URL=${POSTGRES_URL}
ARG GOOGLE_CLIENT_SECRET
ENV GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
ARG FILE_KEY_PRIVATE
ENV FILE_KEY_PRIVATE=${FILE_KEY_PRIVATE}
ARG FILE_KEY_PUBLIC
ENV FILE_KEY_PUBLIC=${FILE_KEY_PUBLIC}
ARG POSTGRES_DBNAME
ENV POSTGRES_DBNAME=${POSTGRES_DBNAME}
ARG POSTGRES_USER
ENV POSTGRES_USER=${POSTGRES_USER}
ARG POSTGRES_PASSWORD
ENV POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
# endregion

# Command to run the application(in development)
CMD ["npm", "run", "start:dev"]

# ------ Staging stage
FROM builder as staging

# Set NODE_ENV to production
ENV NODE_ENV=production

ARG GOOGLE_PROJECT_ID
ENV GOOGLE_PROJECT_ID=$GOOGLE_PROJECT_ID

# Run the production command
CMD ["npm", "start"]

