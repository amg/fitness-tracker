// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_info_query.sql

package gendb

import (
	"context"

	"github.com/google/uuid"
)

const createUserInfo = `-- name: CreateUserInfo :one
INSERT INTO user_info (
  id, email, first_name, last_name, picture_url
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, email, first_name, last_name, picture_url
`

type CreateUserInfoParams struct {
	ID         uuid.UUID
	Email      string
	FirstName  string
	LastName   string
	PictureUrl *string
}

func (q *Queries) CreateUserInfo(ctx context.Context, arg CreateUserInfoParams) (UserInfo, error) {
	row := q.db.QueryRow(ctx, createUserInfo,
		arg.ID,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.PictureUrl,
	)
	var i UserInfo
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.PictureUrl,
	)
	return i, err
}

const deleteUserInfo = `-- name: DeleteUserInfo :exec
DELETE FROM user_info
WHERE id = $1
`

func (q *Queries) DeleteUserInfo(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserInfo, id)
	return err
}

const getUserInfo = `-- name: GetUserInfo :one
SELECT id, email, first_name, last_name, picture_url FROM user_info
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserInfo(ctx context.Context, id uuid.UUID) (UserInfo, error) {
	row := q.db.QueryRow(ctx, getUserInfo, id)
	var i UserInfo
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.PictureUrl,
	)
	return i, err
}

const getUserInfoByEmail = `-- name: GetUserInfoByEmail :one
SELECT id, email, first_name, last_name, picture_url FROM user_info
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserInfoByEmail(ctx context.Context, email string) (UserInfo, error) {
	row := q.db.QueryRow(ctx, getUserInfoByEmail, email)
	var i UserInfo
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.PictureUrl,
	)
	return i, err
}

const listUserInfo = `-- name: ListUserInfo :many
SELECT id, email, first_name, last_name, picture_url FROM user_info
ORDER BY first_name
`

func (q *Queries) ListUserInfo(ctx context.Context) ([]UserInfo, error) {
	rows, err := q.db.Query(ctx, listUserInfo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserInfo
	for rows.Next() {
		var i UserInfo
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.PictureUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
