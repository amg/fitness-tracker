// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: auth_query.sql

package gendb

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_token_jti (
  id, user_id, fingerprint, expires_at
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, user_id, fingerprint, expires_at, created_at
`

type CreateRefreshTokenParams struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Fingerprint string
	ExpiresAt   pgtype.Timestamp
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshTokenJti, error) {
	row := q.db.QueryRow(ctx, createRefreshToken,
		arg.ID,
		arg.UserID,
		arg.Fingerprint,
		arg.ExpiresAt,
	)
	var i RefreshTokenJti
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Fingerprint,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec
DELETE FROM refresh_token_jti
WHERE id = $1
`

func (q *Queries) DeleteRefreshToken(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRefreshToken, id)
	return err
}

const deleteRefreshTokenByUserAndFingerprint = `-- name: DeleteRefreshTokenByUserAndFingerprint :exec
DELETE FROM refresh_token_jti
WHERE user_id = $1 AND fingerprint = $2
`

type DeleteRefreshTokenByUserAndFingerprintParams struct {
	UserID      uuid.UUID
	Fingerprint string
}

func (q *Queries) DeleteRefreshTokenByUserAndFingerprint(ctx context.Context, arg DeleteRefreshTokenByUserAndFingerprintParams) error {
	_, err := q.db.Exec(ctx, deleteRefreshTokenByUserAndFingerprint, arg.UserID, arg.Fingerprint)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT id, user_id, fingerprint, expires_at, created_at FROM refresh_token_jti
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRefreshToken(ctx context.Context, id uuid.UUID) (RefreshTokenJti, error) {
	row := q.db.QueryRow(ctx, getRefreshToken, id)
	var i RefreshTokenJti
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Fingerprint,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const listRefreshToken = `-- name: ListRefreshToken :many
SELECT id, user_id, fingerprint, expires_at, created_at FROM refresh_token_jti
WHERE user_id = $1
ORDER BY id
`

func (q *Queries) ListRefreshToken(ctx context.Context, userID uuid.UUID) ([]RefreshTokenJti, error) {
	rows, err := q.db.Query(ctx, listRefreshToken, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RefreshTokenJti
	for rows.Next() {
		var i RefreshTokenJti
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Fingerprint,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
